ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
annotate("text", x = 1980, y = c(1.5, 2.25), label=c("female", "male")) +
ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("female", "male")) +
ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("female", "male"), colours = c('#00BFC4', '#F8766D')) +
ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("female", "male"), colour = c('#00BFC4', '#F8766D')) +
ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender, guide=FALSE)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender, guide=FALSE)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("female", "male"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("female", "male"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw()
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none", ) +
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw()
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step + facet_grid(~gender)
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender, laberl = gender)) +
ggtitle("High Jump World Record Progression by Gender") +
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender, laberl = gender)) +
ggtitle("High Jump World Record Progression by Gender")
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender, label=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender, laberl = gender)) +
ggtitle("High Jump World Record Progression by Gender") +
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none") +
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() +
geom_step(data=records, mapping=aes(x=year, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=year, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none") +
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of women records
# (points colored by country)
women_by_country <- ggplot() + theme_bw() +
geom_step(data=subset(records, (gender=="female")),
mapping=aes(x=year, y=height)) +
geom_point(data=subset(records, (gender=="female")),
mapping=aes(x=year, y=height, colour=country)) +
ggtitle("Women's High Jump World Record Progression")
women_by_country
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=date, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=date, y=height, colour=gender)) +
annotate("text", x = 1980, y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=date, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=date, y=height, colour=gender)) +
annotate("text", x = "1980-01-01", y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=date, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=date, y=height, colour=gender)) +
annotate("text", x = as.date("1980-01-01"), y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
step <- ggplot() + theme_bw() +
geom_step(data=records, mapping=aes(x=date, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=date, y=height, colour=gender)) +
annotate("text", x = as.Date("1980-01-01"), y = c(1.85, 2.25), label=c("women", "men"),
colour = c( '#F8766D','#00BFC4')) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none")
step
# step-line plot, with points, showing the progression of records
# (facetting by gender)
step <- ggplot() +
geom_step(data=records, mapping=aes(x=date, y=height, colour=gender)) +
geom_point(data=records, mapping=aes(x=date, y=height, colour=gender)) +
ggtitle("High Jump World Record Progression by Gender") +
theme(legend.position="none") +
facet_wrap(~ gender)
step
# step-line plot, with points, showing the progression of women records
# (points colored by country)
women_by_country <- ggplot() + theme_bw() +
geom_step(data=subset(records, (gender=="female")),
mapping=aes(x=date, y=height)) +
geom_point(data=subset(records, (gender=="female")),
mapping=aes(x=date, y=height, colour=country)) +
ggtitle("Women's High Jump World Record Progression")
women_by_country
# step-line plot, with points, showing the progression of men records
# (points colored by country)
men_by_country <- ggplot() + theme_bw() +
geom_step(data=subset(records, (gender=="male")),
mapping=aes(x=year, y=height)) +
geom_point(data=subset(records, (gender=="male")),
mapping=aes(x=year, y=height, colour=country)) +
ggtitle("Men's High Jump World Record Progression")
men_by_country
# step-line plot, with points, showing the progression of men records
# (points colored by country)
men_by_country <- ggplot() + theme_bw() +
geom_step(data=subset(records, (gender=="male")),
mapping=aes(x=date, y=height)) +
geom_point(data=subset(records, (gender=="male")),
mapping=aes(x=date, y=height, colour=country)) +
ggtitle("Men's High Jump World Record Progression")
men_by_country
women_by_country
# Model for women
# regression of 'height' on 'year'
womens_records <- records[records$gender == "female", ]
fit_women <- lm(height ~ year, data=womens_records)
fit_women
summary(fit_women)
pander(data.frame(new, predicted))
new <- data.frame(year = seq(2000, 2016, 4))
predicted <- predict(fit_women, newdata=new)
pander(data.frame(new, predicted))
View(records)
mens_records <- records[records$gender == "male", ]
fit_men <- lm(height ~ year, data=mens)
summary(fit_men)
predicted <- predict(fit_men, newdata=new)
pander(data.frame(new, predicted))
inches <- sapply(records$height, conversion)
inches
View(records)
set.seed(0)
library(e1071)
#(a):
n = 5000
p = 2
x1 = runif(n) - 0.5
x2 = runif(n) - 0.5
y = 1*( x1^2 - x2^2 > 0 )
df = data.frame( x1=x1, x2=x2, y=as.factor(y) )
#(b)
par(mar=c(4,3,3,1))
plot( x1, x2, col=(y+1), pch=19, cex=0.7,
xlab='x1', ylab='x2', main='initial data' )
#(c):
par(mfrow=c(1,2))
m = glm( y ~ x1 + x2, data=df, family=binomial )
# Part (d): Predict the class label of the training data.
y_hat = predict( m, newdata=data.frame(x1=x1,x2=x2), type="response" )
predicted_class = 1 * ( y_hat > 0.5 )
print(1 - sum( predicted_class == y )/length(y) ) #error rate
#plot
plot( x1, x2, col=(predicted_class+1), pch=19, cex=0.7, xlab='x1', ylab='x2',
main='logistic regression: y ~ x1 + x2' )
#(e-f): Using logistic regression to fit a nonlinear model:
#
m = glm( y ~ x1 + x2 + I(x1^2) + I(x2^2) + I(x1*x2), data=df, family="binomial" )
y_hat = predict( m, newdata=data.frame(x1=x1,x2=x2), type="response" )
predicted_class = 1 * ( y_hat > 0.5 )
print( 1 - sum( predicted_class == y )/length(y) ) #error rate
plot( x1, x2, col=(predicted_class+1),
pch=19, cex=0.7, xlab='x1', ylab='x2' )
tune.out = tune( svm, y ~ ., data=df, kernel="linear", ranges=list( cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100, 1000) ) )
install.packages("tm")
library(tm)
install.package("slam")
install.packages("slam")
library(tm)
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
install_github('andreacirilloac/updateR')
updateR(admin_password = 'A')
library(updateR)
updateR(admin_password = 'A')
install.packages("tm")
library(tm)
library(tm)
install.packages("slam")
library(tm)
library(tm)
library(stringr)
library(stringr)
library(stringr)
library(SnowballC)
library(wordcloud)
emails <- read.table("data/HRC_train.tsv", sep="\t", header=FALSE, stringsAsFactors = FALSE)
setwd("/Users/Abigail/Documents/154FinalProject")
emails <- read.table("data/HRC_train.tsv", sep="\t", header=FALSE, stringsAsFactors = FALSE)
for (i in 1:nrow(emails)) {
emails$wordvec[i] <-  strsplit(emails$V2[i], " ")
}
emailsC <- Corpus(VectorSource(emails$wordvec))
processed <- tm_map(emailsC, content_transformer(tolower))
processed <- tm_map(processed, removePunctuation)
processed <- tm_map(processed, removeNumbers)
len(processed)
dtm_raw <- DocumentTermMatrix(processed)
dtm_raw
processed <- tm_map(processed, removeWords, stopwords("english"))
dtm_stop <- DocumentTermMatrix(processed)
dtm_stop
processed <- tm_map(processed, stemDocument, lazy=TRUE)
dtm_stem <- DocumentTermMatrix(processed)
dtm_stem
dtm <- DocumentTermMatrix(processed)
dtmr <- DocumentTermMatrix(processed, control=list(bounds = list(global=c(3, 1200))))
dtmr
total_chars <- c()
mean_chars <- c()
num_words <- c()
ampersands <- c()
qmarks <- c()
semicolons <- c()
qmarks_per_word <- c()
semicolons_per_word <- c()
uppercase_per_word <- c()
for (i in 1:nrow(emails)) {
vec <- as.vector((emails$wordvec[i])[[1]])
total_chars[i] <- sum(nchar(vec))
mean_chars[i] <- mean(nchar(vec))
num_words[i] <- length(vec)
ampersands[i] <-str_count(emails$V2[i], pattern = "&" )
qmarks[i] <-str_count(emails$V2[i], pattern = "/?" )
qmarks_per_word[i] <- qmarks[i]/num_words[i]
semicolons[i] <-str_count(emails$V2[i], pattern = ";" )
semicolons_per_word[i] <- semicolons[i]/num_words[i]
uppercase_per_word[i] <- str_count(emails$V2[i], pattern = "[A-Z]" )/num_words[i]
}
set.seed(1234)
s <- sample(c(1:1315), 1315/4)
m <- as.matrix(dtmr)
df <- data.frame(emails$V1, num_words, m)
write.csv(df, file="data/processed_df.csv")
write.csv(validation, file="data/validation_df.csv")
validation <- df[s,]
write.csv(validation, file="data/validation_df.csv")
train <- df[-s, ]
write.csv(test, file="data/train_df.csv")
write.csv(train, file="data/train_df.csv")
str(train)
View(test)
test <- read.table("data/HRC_test.tsv", sep="\t", header=FALSE, stringsAsFactors = FALSE)
View(test)
for (i in 1:nrow(test)) {
test$wordvec[i] <-  strsplit(test$V2[i], " ")
}
for (i in 1:nrow(test)) {
test$wordvec[i] <-  strsplit(test$V1[i], " ")
}
emailsC <- Corpus(VectorSource(emails$wordvec, test$wordvec))
wordvec <- cbind(emails$wordvec, test$wordvec)
typeof(wordvec)
length(wordvec)
nrow(test)
nrow(emails)
length(emails$wordvec)
wordvec <- c(emails$wordvec, test$wordvec)
length(wordvec)
emailsC <- Corpus(VectorSource(wordvec))
processed <- tm_map(emailsC, content_transformer(tolower))
processed <- tm_map(processed, removePunctuation)
processed <- tm_map(processed, removeNumbers)
dtm_raw <- DocumentTermMatrix(processed)
dtm_raw
processed <- tm_map(processed, removeWords, stopwords("english"))
dtm_stop <- DocumentTermMatrix(processed)
dtm_stop
processed <- tm_map(processed, stemDocument, lazy=TRUE)
dtm_stem <- DocumentTermMatrix(processed)
dtm_stem
dtm <- dtm_stem
dtmr <- DocumentTermMatrix(processed, control=list(bounds = list(global=c(3, 1200))))
dtmr
nrow(train)
df <- data.frame(emails$V1, num_words, m)
m_train <- m[1:904,]
df <- data.frame(emails$V1, num_words, m_train)
m <- as.matrix(dtmr)
m_train <- m[1:904,]
length(emails$V1)
emails <- read.table("data/HRC_train.tsv", sep="\t", header=FALSE, stringsAsFactors = FALSE)
length(emails$V1)
length(wordvec)
length(num_words)
m <- as.matrix(dtmr)
str(m)
m_train <- m[1:1200,]
df <- data.frame(emails$V1, num_words, m_train)
write.csv(df, file="data/processed_df.csv")
for (i in 1:nrow(test)) {
vec <- as.vector((test$wordvec[i])[[1]])
num_words[i] <- length(vec)
}
for (i in 1:nrow(test)) {
vec <- as.vector((test$wordvec[i])[[1]])
test$num_words[i] <- length(vec)
}
set.seed(1234)
s <- sample(c(1:1200), 1200/4)
validation <- df[s,]
write.csv(validation, file="data/validation_df.csv")
train <- df[-s, ]
write.csv(train, file="data/train_df.csv")
m_test <- m[1201:1305,]
for (i in 1:nrow(test)) {
vec <- as.vector((test$wordvec[i])[[1]])
test$num_words[i] <- length(vec)
}
df_test <- data.frame(test$num_words, m_test)
str(df_test)
write.csv(df_test, file="data/processed_test_df.csv")
Terms <- c(38066, 37966, 27504, 9177, 9178)
Steps <- c("Raw", "Stop Words", "Stemmed", "Frequency Selection", "Power Features")
pander(Terms, Steps)
library(pander)
pander(Terms, Steps)
pander(data.frame(Terms, Steps))
nrow(emails)
str(ddf)
str(df)
write.csv(df, file="data/processed_train_df.csv")
Step <- c("RF", "RF with Feature Selection")
Features_Used <- c(0, 0)
Total_Accuracy <- c(0, 0)
Accuracy_per_class <- c(0, 0)
df <- data.frame(Step, Features_Used, Total_Accuracy, Accuracy_per_class)
colnames(df) <- c("Step", "Total Number of Features Used", "Total Accuracy", "Accuracy per Sender Class")
pander(df)
Step <- c("RF", "RF with Feature Selection")
Features_Used <- c(0, 0)
Total_Accuracy <- c(0, 0)
Accuracy_per_class <- c(0, 0)
df <- data.frame(Step, Features_Used, Total_Accuracy, Accuracy_per_class)
colnames(df) <- c("Step", "Total Number of Features Used", "Total Accuracy", "Accuracy per Sender Class")
pander(df)
colnames(df) <- c("Step", "Total # of Features Used", "Total Accuracy", "Accuracy by Sender Class")
pander(df)
colnames(df) <- c("Step", "# of Features Used", "Accuracy", "Accuracy by Sender Class")
pander(df)
colnames(df) <- c("Step", "# of Features Used", "Accuracy", "Accuracy by class")
pander(df)
colnames(df) <- c("Step", " Number of Features Used", "Accuracy", "Accuracy by Class")
pander(df)
c(1:10)
